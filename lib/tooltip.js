// Generated by CoffeeScript 1.8.0
(function() {
  var Tooltip,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tooltip = (function(_super) {
    __extends(Tooltip, _super);

    function Tooltip() {
      return Tooltip.__super__.constructor.apply(this, arguments);
    }

    Tooltip.prototype.opts = {
      placement: null,
      content: "",
      cls: null,
      selector: null,
      delay: null
    };

    Tooltip._placements = ["bottom", "top", "left", "right"];

    Tooltip._tpl = {
      tooltip: '<div class="simple-tooltip">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-content"></div>\n</div>'
    };

    Tooltip.prototype._init = function() {
      if (!this.opts.content) {
        throw '[Tooltip] - 内容不能为空';
      }
      this._render();
      this._bind();
      this.el.data("tooltip", this);
      return this.refresh();
    };

    Tooltip.prototype._render = function() {
      this.el = $(Tooltip._tpl.tooltip).addClass(this.opts.cls);
      this.selector = this.opts.selector;
      this.el.find('.tooltip-content').append(this.opts.content);
      this.el.appendTo('body');
      return this.selector.addClass('tooltip-selector').data('tooltip', this);
    };

    Tooltip.prototype._bind = function() {
      this.selector.on("mouseenter.simple-tooltip", (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.destroy();
        };
      })(this));
      return this.selector.on("mouseleave.simple-tooltip", (function(_this) {
        return function(e) {
          var delay;
          delay = function() {
            return _this.destroy();
          };
          return setTimeout(delay, _this.opts.delay);
        };
      })(this));
    };

    Tooltip.prototype._unbind = function() {
      this.el.off(".simple-tooltip");
      $(document).off(".simple-tooltip");
      return $(window).off(".simple-tooltip");
    };

    Tooltip.prototype.destroy = function() {
      this._unbind();
      this.el.remove();
      this.selector.removeClass("tooltip-selector").removeData("tooltip");
      return this.trigger("tooltip:destroy", [this]);
    };

    Tooltip.prototype.refresh = function() {
      var actualHeight, actualWidth, bodyHeight, bodyWidth, pos, tp;
      this.el.remove().css({
        top: 0,
        left: 0,
        display: 'block'
      }).appendTo('body');
      pos = this.getPosition();
      actualWidth = this.el[0].offsetWidth;
      actualHeight = this.el[0].offsetHeight;
      bodyHeight = $('body').height();
      bodyWidth = $('body').width();
      if (!this.opts.placement) {
        if (pos.top + pos.height + actualHeight < bodyHeight) {
          this.opts.placement = 'bottom';
        } else if (pos.top - actualHeight > 0) {
          this.opts.placement = 'top';
        } else if (pos.left - actualWidth > 0) {
          this.opts.placement = 'left';
        } else {
          this.opts.placement = 'right';
        }
      }
      switch (this.opts.placement) {
        case 'bottom':
          tp = {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
          };
          break;
        case 'top':
          tp = {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
          };
          break;
        case 'left':
          tp = {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
          };
          break;
        default:
          tp = {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
          };
      }
      return this.el.css(tp).addClass("placement-" + this.opts.placement + " tooltip-in");
    };

    Tooltip.prototype.getPosition = function() {
      var el;
      el = this.selector[0];
      return $.extend({}, el.offset, {
        top: el.offsetTop,
        left: el.offsetLeft,
        width: el.offsetWidth,
        height: el.offsetHeight
      });
    };

    return Tooltip;

  })(Widget);

  this.simple || (this.simple = {});

  this.simple.Tooltip = function(opts) {
    return new Tooltip(opts);
  };

  this.simple.Tooltip.destroyAll = Tooltip.destroyAll;

}).call(this);

//# sourceMappingURL=tooltip.js.map
